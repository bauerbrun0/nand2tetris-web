// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: password_reset_reqests.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordResetRequest = `-- name: CreatePasswordResetRequest :one
INSERT INTO password_reset_requests (
    user_id, email, code, expiry, verify_email_after
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, user_id, email, code, verify_email_after, expiry
`

type CreatePasswordResetRequestParams struct {
	UserID           int32
	Email            string
	Code             string
	Expiry           pgtype.Timestamptz
	VerifyEmailAfter pgtype.Bool
}

func (q *Queries) CreatePasswordResetRequest(ctx context.Context, arg CreatePasswordResetRequestParams) (PasswordResetRequest, error) {
	row := q.db.QueryRow(ctx, createPasswordResetRequest,
		arg.UserID,
		arg.Email,
		arg.Code,
		arg.Expiry,
		arg.VerifyEmailAfter,
	)
	var i PasswordResetRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Code,
		&i.VerifyEmailAfter,
		&i.Expiry,
	)
	return i, err
}

const getPasswordResetRequestByCode = `-- name: GetPasswordResetRequestByCode :one
SELECT id, user_id, email, code, verify_email_after, expiry FROM password_reset_requests WHERE
    code = $1
`

func (q *Queries) GetPasswordResetRequestByCode(ctx context.Context, code string) (PasswordResetRequest, error) {
	row := q.db.QueryRow(ctx, getPasswordResetRequestByCode, code)
	var i PasswordResetRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Code,
		&i.VerifyEmailAfter,
		&i.Expiry,
	)
	return i, err
}

const invalidatePasswordResetRequest = `-- name: InvalidatePasswordResetRequest :exec
UPDATE password_reset_requests
SET expiry = $2::timestamptz
WHERE
    id = $1
`

type InvalidatePasswordResetRequestParams struct {
	ID  int32
	Now pgtype.Timestamptz
}

func (q *Queries) InvalidatePasswordResetRequest(ctx context.Context, arg InvalidatePasswordResetRequestParams) error {
	_, err := q.db.Exec(ctx, invalidatePasswordResetRequest, arg.ID, arg.Now)
	return err
}

const invalidatePasswordResetRequestsOfUser = `-- name: InvalidatePasswordResetRequestsOfUser :exec
UPDATE password_reset_requests
SET expiry = $2::timestamptz
WHERE
    user_id = $1 AND
    expiry > $2::timestamptz
`

type InvalidatePasswordResetRequestsOfUserParams struct {
	UserID int32
	Now    pgtype.Timestamptz
}

func (q *Queries) InvalidatePasswordResetRequestsOfUser(ctx context.Context, arg InvalidatePasswordResetRequestsOfUserParams) error {
	_, err := q.db.Exec(ctx, invalidatePasswordResetRequestsOfUser, arg.UserID, arg.Now)
	return err
}
