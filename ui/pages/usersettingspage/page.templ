package usersettingspage

import (
	"github.com/bauerbrun0/nand2tetris-web/internal/validator"
	"github.com/bauerbrun0/nand2tetris-web/ui/components"
	"github.com/bauerbrun0/nand2tetris-web/ui/layouts"
	"github.com/bauerbrun0/nand2tetris-web/ui/pages"
)

type UserSettingsPageData struct {
	Form                       string `form:"form"` // change-password || change-email || change-email-send-code || delete-account
	ChpCurrentPassword         string `form:"chp-current-password"`
	ChpNewPassword             string `form:"chp-new-password"`
	ChpNewPasswordConfirmation string `form:"chp-new-password-confirmation"`
	ChePassword                string `form:"che-password"`
	CheNewEmail                string `form:"che-new-email"`
	ChescCode                  string `form:"chesc-code"`
	DaEmail                    string `form:"da-email"`
	validator.Validator        `form:-`
	pages.PageData             `form:-`
}

templ Page(data UserSettingsPageData) {
	@layouts.BaseLayout(data.PageData) {
		<div class="min-h-full inner-container-small py-6">
			<h1 class="text-xl md:text-2xl font-bold">Settings</h1>
			<h2 class="text-lg md:text-xl my-6">Account</h2>
			<hr class="h-px border-0 bg-divider dark:bg-divider-dark"/>
			@accountSection(data)
			<h2 class="md:text-lg mt-12 mb-6">Account security</h2>
			<hr class="h-px border-0 bg-divider dark:bg-divider-dark"/>
			@emailSection(data)
			@passwordSection(data)
			<h2 class="md:text-lg mt-12 mb-6">Danger Zone</h2>
			<hr class="h-px border-0 bg-divider dark:bg-divider-dark"/>
			@deleteAccountSection(data)
		</div>
	}
}

templ accountSection(data UserSettingsPageData) {
	<div class="flex space-x-3 md:space-x-6 items-center md:pr-6 my-6">
		<div class="w-10 h-10 md:w-14 md:h-14 bg-silver-50 rounded-full dark:bg-white flex items-center">
			@components.UserIcon("text-silver-900 w-4 h-4 md:w-8 md:h-8 mx-auto")
		</div>
		<div class="flex-col space-y-2 flex">
			<span class="font-medium text-left">{ data.UserInfo.Username }</span>
			<span class="text-left">{ data.UserInfo.Email }</span>
		</div>
	</div>
}

templ emailSection(data UserSettingsPageData) {
	<div class="flex justify-between my-6">
		<div class="flex flex-col space-y-4">
			<span>Email</span>
			<span class="font-light text-sm">{ data.UserInfo.Email }</span>
		</div>
		<div class="flex items-center ml-5">
			@components.ToggleModalButton(components.ToggleModalButtonOptions{
				ModalId:        "email-change-modal",
				Text:           "Change Email",
				InitialTrigger: data.Form == "change-email",
			})
			@emailChangeModal(data)
			@components.ToggleModalButton(components.ToggleModalButtonOptions{
				ModalId:        "email-change-send-code-modal",
				InitialTrigger: data.Form == "change-email-send-code",
			})
			@emailChangeSendCodeModal(data)
		</div>
	</div>
}

templ emailChangeModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "email-change-modal",
		Classes: "max-w-[500px]",
	}) {
		<div x-data class="p-4 bg-white-500 rounded-lg sm:p-6 md:p-8 dark:bg-silver-900">
			<form class="space-y-6" action="/user/settings" method="POST" novalidate>
				<div class="flex items-center justify-between">
					<h5 class="text-xl font-medium text-text dark:text-text-dark w-full">Change email</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "email-change-modal",
						XRef:    "closeEmailChangeModalButton",
					})
				</div>
				<input type="hidden" name="form" value="change-email"/>
				@components.Input(components.InputOptions{
					Label:       "Password",
					Name:        "che-password",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["che-password"],
				})
				@components.Input(components.InputOptions{
					Label:       "New Email",
					Name:        "che-new-email",
					Value:       data.CheNewEmail,
					Placeholder: "user@example.com",
					FieldType:   "email",
					Icon:        components.EmailIcon("w-4 h-4"),
					Err:         data.FieldErrors["che-new-email"],
				})
				@components.FormSubmitButton("Change Email")
			</form>
			<div class="text-sm font-medium text-silver-600 mt-6">
				Already received an email?
				<button
					class="text-link dark:text-link-dark cursor-pointer"
					@click="$refs.closeEmailChangeModalButton.click()"
					data-modal-show="email-change-send-code-modal"
				>
					Enter Code
				</button>
			</div>
		</div>
	}
}

templ emailChangeSendCodeModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "email-change-send-code-modal",
		Classes: "max-w-[500px]",
	}) {
		<div class="p-4 bg-white-500 rounded-lg sm:p-6 md:p-8 dark:bg-silver-900">
			<form
				class="space-y-6"
				action="/user/settings"
				method="POST"
				novalidate
			>
				<div class="flex items-center justify-between">
					<h5 class="text-xl font-medium text-text dark:text-text-dark w-full">Change email</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "email-change-send-code-modal",
						XRef:    "closeEmailChangeSendCodeModalButton",
					})
				</div>
				<p class="text-center text-sm">
					We’ve sent a verification code to your new email. Enter the code below to continue changing your email.
				</p>
				<input type="hidden" name="form" value="change-email-send-code"/>
				@components.Input(components.InputOptions{
					Label:       "Code",
					Name:        "chesc-code",
					Value:       "",
					Placeholder: "Verification Code",
					FieldType:   "text",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["chesc-code"],
				})
				@components.FormSubmitButton("Change Email")
			</form>
			<div class="text-sm font-medium text-silver-600 mt-6">
				To change the email or resend the code
				<button
					data-modal-hide="email-change-send-code-modal"
					data-modal-show="email-change-modal"
					class="text-link dark:text-link-dark cursor-pointer"
				>
					click here
				</button>
			</div>
		</div>
	}
}

templ passwordSection(data UserSettingsPageData) {
	<div class="flex justify-between my-6">
		<div class="flex flex-col space-y-4">
			<span>Password</span>
			<span class="font-light text-sm">Want to change your password? Click the button to get a code by email.</span>
		</div>
		<div class="flex items-center ml-5">
			@components.ToggleModalButton(components.ToggleModalButtonOptions{
				ModalId:        "password-change-modal",
				Text:           "Change Password",
				InitialTrigger: data.Form == "change-password",
			})
			@passwordChangeModal(data)
		</div>
	</div>
}

templ passwordChangeModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "password-change-modal",
		Classes: "max-w-[500px]",
	}) {
		<div class="p-4 bg-white-500 rounded-lg sm:p-6 md:p-8 dark:bg-silver-900">
			<form class="space-y-6" action="/user/settings" method="POST" novalidate>
				<div class="flex items-center justify-between">
					<h5 class="text-xl font-medium text-text dark:text-text-dark w-full">Change password</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "password-change-modal",
					})
				</div>
				<input type="hidden" name="form" value="change-password"/>
				@components.Input(components.InputOptions{
					Label:       "Current Password",
					Name:        "chp-current-password",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["chp-current-password"],
				})
				@components.Input(components.InputOptions{
					Label:       "New Password",
					Name:        "chp-new-password",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["chp-new-password"],
				})
				@components.Input(components.InputOptions{
					Label:       "Confirm New Password",
					Name:        "chp-new-password-confirmation",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["chp-new-password-confirmation"],
				})
				@components.FormSubmitButton("Change Password")
			</form>
		</div>
	}
}

templ deleteAccountSection(data UserSettingsPageData) {
	<div class="flex justify-between my-6">
		<div class="flex flex-col space-y-4">
			<span class="text-red-500">Delete my account</span>
			<span class="font-light text-sm">Permanently delete the account</span>
		</div>
		<div class="flex items-center ml-5">
			@components.ToggleModalButton(components.ToggleModalButtonOptions{
				ModalId:           "delete-account-modal",
				Text:              "Delete Account",
				InitialTrigger:    data.Form == "delete-account",
				AdditionalClasses: "hover:text-red-500 dark:hover:text-red-500 hover:border-red-500",
			})
			@deleteAccountModal(data)
		</div>
	</div>
}

templ deleteAccountModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "delete-account-modal",
		Classes: "max-w-[500px]",
	}) {
		<div class="p-4 bg-white-500 rounded-lg sm:p-6 md:p-8 dark:bg-silver-900">
			<form class="space-y-6" action="/user/settings" method="POST" novalidate>
				<div class="flex items-center justify-between">
					<h5 class="text-xl font-medium text-text dark:text-text-dark w-full">Delete Account</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "delete-account-modal",
					})
				</div>
				<p class="text-center text-sm">
					This action cannot be undone. This will permanently delete your entire account.
					Type in <strong>{ data.UserInfo.Email }</strong> to confirm.
				</p>
				<input type="hidden" name="form" value="delete-account"/>
				@components.Input(components.InputOptions{
					Label:       "Email",
					Name:        "da-email",
					Value:       "",
					Placeholder: "",
					FieldType:   "email",
					Icon:        components.EmailIcon("w-4 h-4"),
					Err:         data.FieldErrors["da-email"],
				})
				<button
					type="submit"
					class={ `
							w-full
							hover:cursor-pointer text-white bg-red-500 hover:bg-red-400
							focus:ring-4 focus:ring-primary-300 font-medium rounded-lg
							px-5 py-2.5 dark:hover:bg-red-800 focus:outline-none
							dark:focus:ring-primary-800
						` }
				>
					Delete Account
				</button>
			</form>
		</div>
	}
}
