package usersettingspage

import (
	"github.com/bauerbrun0/nand2tetris-web/internal/ctxi18n"
	"github.com/bauerbrun0/nand2tetris-web/ui/components"
	"slices"
)

templ emailChangeModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "email-change-modal",
		Classes: "max-w-[500px]",
	}) {
		<div x-data class="bg-white-500 dark:bg-silver-900 rounded-lg p-4 sm:p-6 md:p-8">
			<form class="space-y-6" action="/user/settings" method="POST" novalidate>
				<div class="flex items-center justify-between">
					<h5 class="text-text dark:text-text-dark w-full text-xl font-medium">
						{ ctxi18n.T(ctx, "user_settings_page.change_email") }
					</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "email-change-modal",
						XRef:    "closeEmailChangeModalButton",
					})
				</div>
				@components.CSRFTokenInput(data.CSRFToken)
				<input type="hidden" name="Action" value={ ActionChangeEmail }/>
				@components.Input(components.InputOptions{
					Label:       ctxi18n.T(ctx, "text.password"),
					Name:        "ChangeEmail.Password",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["ChangeEmail.Password"],
				})
				@components.Input(components.InputOptions{
					Label:       ctxi18n.T(ctx, "user_settings_page.new_email"),
					Name:        "ChangeEmail.NewEmail",
					Value:       data.ChangeEmail.NewEmail,
					Placeholder: ctxi18n.T(ctx, "text.email_placeholder"),
					FieldType:   "email",
					Icon:        components.EmailIcon("w-4 h-4"),
					Err:         data.FieldErrors["ChangeEmail.NewEmail"],
				})
				@components.FormSubmitButton(ctxi18n.T(ctx, "user_settings_page.change_email"))
			</form>
			<div class="text-silver-600 mt-6 text-sm font-medium">
				{ ctxi18n.T(ctx, "user_settings_page.already_received_email") }
				<button
					class="text-link dark:text-link-dark cursor-pointer"
					@click="$refs.closeEmailChangeModalButton.click()"
					data-modal-show="email-change-send-code-modal"
				>
					{ ctxi18n.T(ctx, "text.enter_code") }
				</button>
			</div>
		</div>
	}
}

templ emailChangeSendCodeModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "email-change-send-code-modal",
		Classes: "max-w-[500px]",
	}) {
		<div class="bg-white-500 dark:bg-silver-900 rounded-lg p-4 sm:p-6 md:p-8">
			<form
				class="space-y-6"
				action="/user/settings"
				method="POST"
				novalidate
			>
				<div class="flex items-center justify-between">
					<h5 class="text-text dark:text-text-dark w-full text-xl font-medium">
						{ ctxi18n.T(ctx, "user_settings_page.change_email") }
					</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "email-change-send-code-modal",
						XRef:    "closeEmailChangeSendCodeModalButton",
					})
				</div>
				<p class="text-center text-sm">
					{ ctxi18n.T(ctx, "user_settings_page.sent_verification_code") }
				</p>
				@components.CSRFTokenInput(data.CSRFToken)
				<input type="hidden" name="Action" value={ ActionChangeEmailSendCode }/>
				@components.Input(components.InputOptions{
					Label:       "Code",
					Name:        "ChangeEmailSendCode.Code",
					Value:       "",
					Placeholder: ctxi18n.T(ctx, "text.verification_code"),
					FieldType:   "text",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["ChangeEmailSendCode.Code"],
				})
				@components.FormSubmitButton(ctxi18n.T(ctx, "user_settings_page.change_email"))
			</form>
			<div class="text-silver-600 mt-6 text-sm font-medium">
				{ ctxi18n.T(ctx, "user_settings_page.to_change_email") }
				<button
					data-modal-hide="email-change-send-code-modal"
					data-modal-show="email-change-modal"
					class="text-link dark:text-link-dark cursor-pointer"
				>
					{ ctxi18n.T(ctx, "user_settings_page.click_here") }
				</button>
			</div>
		</div>
	}
}

templ passwordChangeModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "password-change-modal",
		Classes: "max-w-[500px]",
	}) {
		<div class="bg-white-500 dark:bg-silver-900 rounded-lg p-4 sm:p-6 md:p-8">
			<form class="space-y-6" action="/user/settings" method="POST" novalidate>
				<div class="flex items-center justify-between">
					<h5 class="text-text dark:text-text-dark w-full text-xl font-medium">
						{ ctxi18n.T(ctx, "text.password") }
					</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "password-change-modal",
					})
				</div>
				@components.CSRFTokenInput(data.CSRFToken)
				<input type="hidden" name="Action" value={ ActionChangePassword }/>
				@components.Input(components.InputOptions{
					Label:       ctxi18n.T(ctx, "user_settings_page.current_password"),
					Name:        "ChangePassword.CurrentPassword",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["ChangePassword.CurrentPassword"],
				})
				@components.Input(components.InputOptions{
					Label:       ctxi18n.T(ctx, "user_settings_page.new_password"),
					Name:        "ChangePassword.NewPassword",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["ChangePassword.NewPassword"],
				})
				@components.Input(components.InputOptions{
					Label:       ctxi18n.T(ctx, "user_settings_page.confirm_new_password"),
					Name:        "ChangePassword.NewPasswordConfirmation",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["ChangePassword.NewPasswordConfirmation"],
				})
				@components.FormSubmitButton(ctxi18n.T(ctx, "user_settings_page.change_password"))
			</form>
		</div>
	}
}

templ deleteAccountModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "delete-account-modal",
		Classes: "max-w-[500px]",
	}) {
		<div class="bg-white-500 dark:bg-silver-900 rounded-lg p-4 sm:p-6 md:p-8">
			<form class="space-y-6" action="/user/settings" method="POST" novalidate>
				<div class="flex items-center justify-between">
					<h5 class="text-text dark:text-text-dark w-full text-xl font-medium">
						{ ctxi18n.T(ctx, "user_settings_page.delete_account") }
					</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "delete-account-modal",
					})
				</div>
				<p class="text-center text-sm">
					{ ctxi18n.T(ctx, "user_settings_page.delete_account_cannot_be_undone") }
					{ ctxi18n.T(ctx, "user_settings_page.type_in") }
					<strong>
						{ data.UserInfo.Email }
					</strong> { ctxi18n.T(ctx, "user_settings_page.to_confirm") }
				</p>
				@components.CSRFTokenInput(data.CSRFToken)
				<input type="hidden" name="Action" value={ ActionDeleteAccount }/>
				@components.Input(components.InputOptions{
					Label:       ctxi18n.T(ctx, "text.email"),
					Name:        "da-email",
					Value:       data.DeleteAccount.Email,
					Placeholder: data.UserInfo.Email,
					FieldType:   "email",
					Icon:        components.EmailIcon("w-4 h-4"),
					Err:         data.FieldErrors["da-email"],
				})
				<button
					type="submit"
					class={ `
							w-full
							hover:cursor-pointer text-white bg-red-500 hover:bg-red-400
							focus:ring-4 focus:ring-primary-300 font-medium rounded-lg
							px-5 py-2.5 dark:hover:bg-red-800 focus:outline-none
							dark:focus:ring-primary-800
						` }
				>
					{ ctxi18n.T(ctx, "user_settings_page.delete_account") }
				</button>
			</form>
		</div>
	}
}

templ createPasswordModal(data UserSettingsPageData) {
	@components.Modal(components.ModalOptions{
		Id:      "create-password-modal",
		Classes: "max-w-[500px]",
	}) {
		<div x-data class="bg-white-500 dark:bg-silver-900 rounded-lg p-4 sm:p-6 md:p-8">
			<form class="space-y-6" action="/user/settings" method="POST" novalidate>
				<div class="flex items-center justify-between">
					<h5 class="text-text dark:text-text-dark w-full text-xl font-medium">
						{ ctxi18n.T(ctx, "user_settings_page.create_password") }
					</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: "create-password-modal",
						XRef:    "closeCreatePasswordModalButton",
					})
				</div>
				@components.CSRFTokenInput(data.CSRFToken)
				<input type="hidden" name="Action" value={ ActionCreatePassword }/>
				@components.Input(components.InputOptions{
					Label:       ctxi18n.T(ctx, "text.password"),
					Name:        "CreatePassword.Password",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["CreatePassword.Password"],
				})
				@components.Input(components.InputOptions{
					Label:       ctxi18n.T(ctx, "user_settings_page.confirm_password"),
					Name:        "CreatePassword.PasswordConfirmation",
					Value:       "",
					Placeholder: "••••••••",
					FieldType:   "password",
					Icon:        components.KeyIcon("w-4 h-4"),
					Err:         data.FieldErrors["CreatePassword.PasswordConfirmation"],
				})
				@components.FormSubmitButton(ctxi18n.T(ctx, "user_settings_page.create_password"))
			</form>
		</div>
	}
}

templ authenticatedActionModalPasswordSubmitButton(text string) {
	<button
		type="submit"
		name="Verification"
		value={ VerificationPassword }
		class={ `
				w-full
				hover:cursor-pointer text-white bg-primary-700 hover:bg-primary-600
				focus:ring-4 focus:ring-primary-300 font-medium rounded-lg
				px-5 py-2.5 dark:hover:bg-primary-800 focus:outline-none
				dark:focus:ring-primary-800
			` }
	>
		{ text }
	</button>
}

type AuthenticatedActionModalOptions struct {
	Data               UserSettingsPageData
	ModalId            string
	Title              string
	Note               string
	PasswordButtonText string
	PasswordFieldName  string
	Action             Action
	AdditionalInputs   templ.Component
}

templ authenticatedActionModal(options AuthenticatedActionModalOptions) {
	@components.Modal(components.ModalOptions{
		Id:      options.ModalId,
		Classes: "max-w-[500px]",
	}) {
		<div x-data class="bg-white-500 dark:bg-silver-900 rounded-lg p-4 sm:p-6 md:p-8">
			<form class="space-y-6" action="/user/settings" method="POST" novalidate>
				<div class="flex items-center justify-between">
					<h5 class="text-text dark:text-text-dark w-full text-xl font-medium">
						{ options.Title }
					</h5>
					@components.CloseModalButton(components.CloseModalButtonOptions{
						ModalId: options.ModalId,
					})
				</div>
				if options.AdditionalInputs != nil {
					@options.AdditionalInputs
				}
				<p class="text-center text-sm">
					{ options.Note }
				</p>
				@components.CSRFTokenInput(options.Data.CSRFToken)
				<input type="hidden" name="Action" value={ options.Action }/>
				if options.Data.UserInfo.IsPasswordSet {
					@components.Input(components.InputOptions{
						Label:       ctxi18n.T(ctx, "text.password"),
						Name:        options.PasswordFieldName,
						Value:       "",
						Placeholder: "••••••••",
						FieldType:   "password",
						Icon:        components.KeyIcon("w-4 h-4"),
						Err:         options.Data.FieldErrors[options.PasswordFieldName],
					})
					@authenticatedActionModalPasswordSubmitButton(options.PasswordButtonText)
				}
				if options.Data.UserInfo.IsPasswordSet && len(options.Data.UserInfo.LinkedAccounts) >= 1 {
					<div class="flex w-full items-center space-x-2">
						<hr class="bg-divider dark:bg-divider-dark h-px w-full border-0"/>
						<span class="text-divider dark:text-divider-dark text-sm font-medium">{ ctxi18n.T(ctx, "text.or") }</span>
						<hr class="bg-divider dark:bg-divider-dark h-px w-full border-0"/>
					</div>
				}
				if slices.Contains(options.Data.UserInfo.LinkedAccounts, "GitHub") {
					<button
						type="submit"
						name="Verification"
						value={ VerificationGitHub }
						class={ `
							hover:cursor-pointer text-text hover:text-primary-700 border border-black hover:border-primary-700
							focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg
							text-sm px-5 py-2.5 text-center dark:border-white dark:text-white dark:hover:text-primary-700
							dark:focus:ring-primary-800 w-full flex space-x-2 items-center justify-center
						` }
					>
						@components.GitHubIcon("w-5 h-5")
						<span>{ ctxi18n.TTemplate(ctx, "user_settings_page.verify_with", map[string]string {"Provider": "GitHub"}) }</span>
					</button>
				}
				if slices.Contains(options.Data.UserInfo.LinkedAccounts, "Google") {
					<button
						type="submit"
						name="Verification"
						value={ VerificationGoogle }
						class={ `
							hover:cursor-pointer text-text hover:text-primary-700 border border-black hover:border-primary-700
							focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg
							text-sm px-5 py-2.5 text-center dark:border-white dark:text-white dark:hover:text-primary-700
							dark:focus:ring-primary-800 w-full flex space-x-2 items-center justify-center
						` }
					>
						@components.GoogleIcon("w-5 h-5")
						<span>{ ctxi18n.TTemplate(ctx, "user_settings_page.verify_with", map[string]string {"Provider": "Google"}) }</span>
					</button>
				}
			</form>
		</div>
	}
}
