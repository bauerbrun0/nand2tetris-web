package components

import "fmt"

type ModalOptions struct {
	Id      string
	Classes string
}

templ Modal(options ModalOptions) {
	<div
		id={ options.Id }
		tabindex="-1"
		aria-hidden="true"
		class={ `
			hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center
			items-center w-full md:inset-0 h-[calc(100%)] max-h-full
		` }
	>
		<div
			x-data
			@click.outside="history.replaceState(null, '', window.location.pathname)"
			class={ fmt.Sprintf("relative mx-2 w-full %s", options.Classes) }
		>
			{ children... }
		</div>
	</div>
}

type CloseModalButtonOptions struct {
	ModalId string
	XRef string
}

templ CloseModalButton(options CloseModalButtonOptions) {
	<button
		type="button"
		x-ref={ options.XRef }
		@click="history.replaceState(null, '', window.location.pathname)"
		class={ `
			end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg
			text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600
			dark:hover:text-white
		` }
		data-modal-hide={ options.ModalId }
	>
		@XIcon("w-5 h-5")
		<span class="sr-only">Close modal</span>
	</button>
}

type ToggleModalButtonOptions struct {
	ModalId string
	Text string // if empty the button is hidden
	InitialTrigger bool
}

templ ToggleModalButton(options ToggleModalButtonOptions) {
	{{
		inputClasses := `
			hover:cursor-pointer text-text hover:text-primary-700 border border-black hover:border-primary-700
			focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg
			text-sm px-5 py-2.5 text-center dark:border-white dark:text-white dark:hover:text-primary-700
			dark:focus:ring-primary-800 whitespace-nowrap
		`
		if options.Text == "" {
			inputClasses += " hidden"
		}
	}}
	<button
		data-modal-target={ options.ModalId }
		data-modal-toggle={ options.ModalId }
		if options.InitialTrigger {
			x-init="$nextTick(() => $el.click())"
		}
		class={ inputClasses }
	>
		{ options.Text }
	</button>
}
